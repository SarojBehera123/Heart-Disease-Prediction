# -*- coding: utf-8 -*-
"""Heart_disease_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15rn3_6O6fe1UqJ2Qabmd3HLkF7RIgYrG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/heart_disease_data.csv")
df.head(2)

df.isnull().sum()

df.drop(columns=['patient_id'], inplace=True)

df.head(5)

df= df.join(pd.get_dummies(df['sex'], drop_first=True))
df.head(5)

df['male']= df['male'].astype("int")

df.drop(columns=['sex'], inplace=True)

df['chest_pain_type'].value_counts()

chest_pain_mapping = {
    "asymptomatic": 1,
    "non-anginal pain": 2,
    "atypical angina": 3,
    "typical angina": 4
}

df['chest_pain_type'] = df['chest_pain_type'].map(chest_pain_mapping)

df['resting_ecg'].value_counts()

resting_ecg_dict = {
    "normal": 1,
    "ST-T wave abnormality": 2,
    "left ventricular hypertrophy": 3
}

df['resting_ecg'] = df['resting_ecg'].map(resting_ecg_dict)

df['slope'].value_counts()

slope_dict = {
    "upsloping": 1,
    "flat": 2,
    "downsloping": 3
}

df['slope']= df['slope'].map(slope_dict)

df["thal"].value_counts()

thal_dict = {
    "normal": 1,
    "reversible defect": 2,
    "fixed defect": 3
}

df['thal'] = df['thal'].map(thal_dict)

df.head()

df.corr()

target_correlations = df.corr()['heart_disease'].apply(abs).sort_values(ascending=False)
target_correlations

plt.figure(figsize=(18, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

scaller = StandardScaler()
lr = LogisticRegression()
x = df.drop(columns=['heart_disease'])
y = df['heart_disease']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

lr.fit(x_train, y_train)

accuracy_score(lr.predict(x_test), y_test)

from sklearn.ensemble import RandomForestClassifier
rmf= RandomForestClassifier()

rmf.fit(x_train,y_train)

rmf.score(x_test,y_test)

from sklearn.svm import SVC
svm = SVC()

svm.fit(x_train, y_train)

svm.score(x_test, y_test)

from sklearn.metrics import hinge_loss
decision_scores = svm.decision_function(x_test)

# Calculate hinge loss
loss = hinge_loss(y_test, decision_scores)

print(f'Hinge Loss: {loss}')

from sklearn.ensemble import VotingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier

lr = LogisticRegression()
svm = SVC()
rmf = RandomForestClassifier()

voting_clf= VotingClassifier(estimators=[('lr', lr), ('svm', svm), ('rmf', rmf)], voting='hard')

voting_clf.fit(x_train, y_train)

y_pred = voting_clf.predict(x_test)

y_pred

voting_clf.score(x_test, y_test)

accuracy_score(y_pred, y_test)